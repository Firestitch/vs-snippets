{
  "OnDestroy Subject": {
    "prefix": "@fs/destroy",
    "body": [
      "private _destroy$ = new Subject();",
      "",
      "public ngOnDestroy(): void {",
      "  this._destroy$.next();",
      "  this._destroy$.complete();",
      "}"
    ]
  },
  "Service": {
    "prefix": "@fs/service",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "",
      "@Injectable()",
      "export class $1Service {",
      "",
      "}"
    ]
  },
  "Route Observer": {
    "prefix": "@fs/route-observer",
    "body": [
      "public routeObserver$ = new RouteObserver(this._route, '$1');",
      "",
      "//private _route: ActivatedRoute",
      "",
      "this.routeObserver$",
      "  .pipe(",
      "    takeUntil(this._destroy$)",
      "  )",
      "  .subscribe(($1) => {",
      "    $2",
      "    this._cdRef.markForCheck();",
      "  });"
    ]
  },
  "Control Value Accessor": {
    "prefix": "@fs/control-value-accessor",
    "body": [
      "providers: [{",
      " provide: NG_VALUE_ACCESSOR,",
      "  useExisting: $1,",
      "  multi: true",
      "}]",
      "",
      "public writeValue(value): void {}",
      "",
      "public registerOnChange(_) { this.onChange = _; }",
      "public registerOnTouched(_) {}",
      "",
      "public onChange: any = () => {}",
      "public onTouch: any = () => {}"
    ]
  },
  "Subscribe": {
    "prefix": "@fs/subscribe",
    "body": [
      "  .pipe(",
      "    takeUntil(this._destroy$)",
      "  )",
      "  .subscribe((response) => {",
      "  ",
      "  });"
    ]
  },
  "Console Log": {
    "prefix": "@fs/console",
    "body": [
      "console.log($1);"
    ]
  },
  "Firestitch List": {
    "prefix": "@fs/list",
    "body": [
      "public listConfig: FsListConfig;",
      "",
      "this.listConfig = {",
      "  filters: [",
      "    {",
      "      name: 'keyword',",
      "      type: ItemType.Text,",
      "      label: 'Search'",
      "    },",
      "  ],",
      "  fetch: (query) => {",
      "    return of()",
      "      .pipe(",
      "        map((response) => ({ data: response.data, paging: response.paging })),",
      "      );",
      "  },",
      "};"
    ]
  }
}